#define N ? // Rozmiar bufora

typedef struct {
    Towar bufor[N * P];  // Bufor mogący pomieścić N jednostek towaru (P oznacza ilość producentów)
    int wstaw = 0, wyjmij = 0;  // Pozycje wstawiania oraz wyjmowania towaru
} Towar;  // Definicja typu dla jednostek towaru

semaphore PROD = N;  // Semafor do wstrzymywania Producenta
semaphore KONS = 0;  // Semafor do wstrzymywania Konsumenta
semaphore ZAPIS = 1;
semaphore ODCZYT = 1;

int producenci_PGID;  // PGID grupy procesów producent
int konsumenci_PGID;  // PGID grupy procesów konsument

// Proces Producent
// ----------------

STOP() {  // jeśli odebrano sygnał STOP
    exit();  // zatrzymaj program
}

Towar towarProd;

while (1) {
    P(PROD);  // Opusc semafor Producenta
    P(ZAPIS);
    while (wartosc_semafor(KONS) == N);  // Czekaj na wolne miejsce w buforze
    wstaw = (wstaw + 1) % N;  // Przesuń pozycję wstawiania o 1 dalej
    V(ZAPIS);
    towarProd = czytaj(plik);  // Czytaj towar z pliku
    if (towarProd == null) {  // Jeśli nie ma nic więcej do odczytania
        kill(STOP, producenci_PGID);  // Wyślij sygnał końca produkcji do wszystkich producentów
    }
    bufor[wstaw] = towarProd;  // Umieść towar w buforze
    V(KONS);  // Podnieś semafor Konsumenta
}

// Proces Konsument
// ----------------

STOP() {  // jeśli odebrano sygnał STOP
    exit();  // zatrzymaj program
}

Towar towarKons;

while (1) {
    P(KONS);
    P(ODCZYT);  // Opusc semafor Konsumenta
    towarKons = bufor[wyjmij];  // Pobierz towar z bufora
    if (bufor == STOP) {  // Sprawdź, czy w buforze umieszczono kod STOP
        kill(STOP, konsumenci_PGID);  // Wyślij sygnał końca konsumpcji do wszystkich konsumentów
    }
    wyjmij = (wyjmij + 1) % N;  // Przesuń pozycję wyjmowania o 1 dalej
    V(ODCZYT);
    V(PROD);  // Podnieś semafor Producenta
    // Konsumpcja towaru
}
